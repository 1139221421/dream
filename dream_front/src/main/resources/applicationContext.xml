<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   			  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                http://www.springframework.org/schema/util
                http://www.springframework.org/schema/util/spring-util-3.2.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context-3.2.xsd
                http://www.springframework.org/schema/tx
                http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<context:component-scan base-package="com.lxl.*"/>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		  p:basePackage="com.lxl.dao"/>

	<context:property-placeholder ignore-resource-not-found="false" location="classpath*:conf.properties"/>

	<bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource" destroy-method="close" init-method="init">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>

		<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize" value="${druid.initialSize}"/>
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="${druid.minIdle}"/>
		<!-- 最大连接池数量 -->
		<property name="maxActive" value="${druid.maxActive}"/>

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}"/>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

		<!-- 检查连接空间是否足够 -->
		<property name="testWhileIdle" value="${druid.testWhileIdle}"/>
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句 -->
		<property name="validationQuery" value="${druid.validationQuery}"/>
		<!-- 申请连接时执行validationQuery检测连接是否有效 -->
		<property name="testOnBorrow" value="${druid.testOnBorrow}"/>
		<!-- 归还连接时执行validationQuery检测连接是否有效 -->
		<property name="testOnReturn" value="${druid.testOnReturn}"/>

		<property name="removeAbandoned" value="${druid.removeAbandoned}"/>
		<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>
		<!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="${druid.logAbandoned}"/>
		<!-- 关闭abanded连接时输出错误日志 -->

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

		<!-- 属性类型是字符串，通过别名的方式配置扩展插件，
		常用的插件有：
		监控统计用的filter:stat
		日志用的filter:log4j
		 防御sql注入的filter:wall -->
		<property name="filters" value="${druid.filters}"/>

	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"/>

	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		  p:dataSource-ref="dataSource"/>

	<util:map id="myBaitsConfig">
		<entry key="cacheEnabled" value="true"/>
		<entry key="lazyLoadingEnabled" value="true"/>
		<entry key="enhancementEnabled" value="true"/>
		<entry key="errorTracingEnabled" value="true"/>
		<entry key="maxSessions" value="1024"/>
		<entry key="maxTransactions" value="512"/>
		<entry key="maxRequests" value="2048"/>
		<entry key="useStatementNamespaces" value="true"/>
	</util:map>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		  p:dataSource-ref="dataSource"
		  p:configurationProperties-ref="myBaitsConfig">
		<property name="typeAliasesPackage" value="com.lxl.vo"/>
	</bean>

	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.lxl.service.*</value>
				<value>com.lxl.dao.*</value>
			</list>
		</property>
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="inse*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="upda*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="dele*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="sele*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="coun*" propagation="NOT_SUPPORTED" read-only="true"/>
		</tx:attributes>
	</tx:advice>


	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
		<aop:advisor pointcut="execution(* com.lxl.service.*Service*.*(..))" advice-ref="txAdvice"/>
	</aop:config>

</beans>
